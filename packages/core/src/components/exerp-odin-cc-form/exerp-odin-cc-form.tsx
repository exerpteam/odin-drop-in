import { Component, h, Prop, State, Watch, Event, EventEmitter } from '@stencil/core';

// üßë‚Äçüíª Declare OdinPay at the module level for type safety if you create a .d.ts file for it
//    or use 'any' for now.
declare const OdinPay: any;

// üßë‚Äçüíª Define payload interfaces for events (can be moved/shared later)
export interface OdinPaySubmitPayload {
  paymentMethodId: string;
  // any other relevant data from OdinPay result.paymentMethod
}

export interface OdinPayFieldError {
  field: string; // The name of the field (e.g., "card", "postalCode", "name") or a generic key like "0"
  message: string; // The specific error message for this field
}

export interface OdinPayErrorPayload {
  code: string; // e.g., 'VALIDATION_ERROR', 'API_ERROR', 'GENERAL_ERROR', 'SDK_LOAD_ERROR', etc.
  message: string; // A general, human-readable error message, possibly a summary.
  fieldErrors?: OdinPayFieldError[]; // Optional: For field-specific validation errors
  httpStatusCode?: number; // Optional: For API errors
  rawError?: any; // Optional: For debugging, could include the original result.message
}

export interface BillingFieldsConfig {
  name?: boolean; // For "Name on Card"
  // üìù We'll add more fields here later: addressLine1, etc.
}

@Component({
  tag: 'exerp-odin-cc-form',
  styleUrl: 'exerp-odin-cc-form.css',
  shadow: false,
})
export class ExerpOdinCcForm {
  /**
   * The short-lived public token obtained from the ODIN backend,
   * required to initialize the OdinPay.js library.
   * Passed down from the facade.
   */
  @Prop() odinPublicToken?: string;

  /**
   * Indicates if the payment method token generated by OdinPay.js
   * should be treated as single-use (`true`) or intended for saving (`false`).
   * Passed down from the facade. Defaults to `true`.
   */
  @Prop() isSingleUse: boolean = true;

  /**
   * The country code ('US' or 'CA') for which the payment form should be configured.
   * This is mandatory and passed to OdinPay.js.
   */
  @Prop() countryCode!: 'US' | 'CA'; // Making it mandatory and specific

  /**
   * Optional configuration to enable and manage additional billing fields.
   * Example: { name: true } to enable the "Name on Card" field.
   */
  @Prop() billingFieldsConfig?: BillingFieldsConfig;

  /**
   * Fired when OdinPay.js successfully returns a payment method token
   * after the user submits the form. Contains the paymentMethodId.
   */
  @Event() odinSubmitInternal!: EventEmitter<OdinPaySubmitPayload>;

  /**
   * Fired when OdinPay.js returns an error during submission
   * or if an internal setup error occurs. Contains the error message.
   */
  @Event() odinErrorInternal!: EventEmitter<OdinPayErrorPayload>;

  @State() private odinPayInstance: any = null;
  @State() private scriptLoaded: boolean = false;
  @State() private initializationError: string | null = null;
  @State() private isLoading: boolean = false;
  @State() private odinFormRenderedBySDK: boolean = false;

  private componentId = `exerp-odin-cc-form-${Math.random().toString(36).substring(2, 9)}`;
  private cardInfoId = `${this.componentId}-card-info`;
  private nameOnCardId = `${this.componentId}-name-on-card`;
  private postalCodeId = `${this.componentId}-postal-code`;
  private odinSubmitButtonId = `${this.componentId}-odin-submit-button`;
  private visibleSubmitButtonId = `${this.componentId}-visible-submit-button`;

  private loadScript(url: string, id: string): Promise<void> {
    return new Promise((resolve, reject) => {
      if (document.getElementById(id)) {
        resolve();
        return;
      }
      const script = document.createElement('script');
      script.src = url;
      script.id = id;
      script.async = true;
      script.onload = () => resolve();
      script.onerror = () => reject(new Error(`Failed to load script: ${url}`));
      document.head.appendChild(script);
    });
  }

  async componentDidLoad() {
    console.log('[Core Component] componentDidLoad - odinPublicToken:', this.odinPublicToken, 'countryCode:', this.countryCode);
    // Check for countryCode before initializing
    if (this.odinPublicToken && this.countryCode) {
      await this.initializeOdinPayAndForm();
    } else if (!this.countryCode) {
      const errorMsg = '[Core Component] countryCode prop is missing. Cannot initialize OdinPay.';
      console.error(errorMsg);
      this.initializationError = errorMsg;
      this.odinErrorInternal.emit({ message: errorMsg, code: 'INIT_NO_COUNTRY_CODE' });
      this.isLoading = false;
    }
  }

  @Watch('odinPublicToken')
  async watchOdinPublicToken(newValue: string, oldValue: string) {
    if (newValue && newValue !== oldValue) {
      console.log('[Core Component] odinPublicToken changed, re-initializing OdinPay. Current countryCode:', this.countryCode);
      // Check for countryCode before re-initializing
      if (this.countryCode) {
        await this.initializeOdinPayAndForm();
      } else {
        const errorMsg = '[Core Component] countryCode prop is missing on token change. Cannot re-initialize OdinPay.';
        console.error(errorMsg);
        // Optionally emit an error or handle as appropriate
        this.initializationError = errorMsg;
        this.odinErrorInternal.emit({ message: errorMsg, code: 'INIT_NO_COUNTRY_CODE_ON_UPDATE' });
        this.isLoading = false;
      }
    }
  }

  @Watch('countryCode')
  async watchCountryCode(newValue: string, oldValue: string) {
    if (newValue && newValue !== oldValue && this.odinPublicToken) {
      console.log('[Core Component] countryCode changed, re-initializing OdinPay. New value:', newValue);
      await this.initializeOdinPayAndForm();
    } else if (!newValue && this.odinPublicToken) {
      const errorMsg = '[Core Component] countryCode prop was unset. Cannot re-initialize OdinPay.';
      console.error(errorMsg);
      this.initializationError = errorMsg;
      this.odinErrorInternal.emit({ message: errorMsg, code: 'INIT_NO_COUNTRY_CODE_ON_UPDATE' });
      this.isLoading = false;
    }
  }

  private async initializeOdinPayAndForm() {
    this.isLoading = true;
    this.initializationError = null;
    this.odinFormRenderedBySDK = false;

    // Early exit if countryCode is missing (though props should ensure it, this is defensive)
    if (!this.countryCode) {
      const errorMsg = '[Core Component] Internal Error: countryCode is missing in initializeOdinPayAndForm.';
      console.error(errorMsg);
      this.initializationError = errorMsg;
      this.odinErrorInternal.emit({ message: errorMsg, code: 'INIT_NO_COUNTRY_CODE_INTERNAL' });
      this.isLoading = false;
      return;
    }

    try {
      if (!this.scriptLoaded) {
        await this.loadScript('https://js.odinpay.net', 'odin-pay-sdk');
        this.scriptLoaded = true;
        console.log('[Core Component] OdinPay.js script loaded.');
      }

      if (typeof OdinPay === 'undefined') {
        this.initializationError = 'OdinPay SDK is not available even after script load.';
        console.error(this.initializationError);
        this.odinErrorInternal.emit({ message: this.initializationError, code: 'SDK_LOAD_ERROR' });
        this.isLoading = false;
        return;
      }

      // Basic theme from CodePen example, can be made configurable via prop later
      const baseTheme = {
        // Define our base theme structure
        input: {
          base: {
            fontFamily: '-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans',
            fontSize: '16px',
          },
          invalid: {
            color: 'red',
            borderColor: 'red',
          },
        },
      };

      // Construct the options object with 'country' and a nested 'theme'
      const odinPayOptions = {
        country: this.countryCode,
        theme: baseTheme,
      };
      console.log(`[Core Component] About to call OdinPay(). Token:`, this.odinPublicToken, `Options:`, JSON.stringify(odinPayOptions));

      try {
        this.odinPayInstance = OdinPay(this.odinPublicToken, odinPayOptions);
      } catch (odinConstructorError: any) {
        console.error('[Core Component] Error DIRECTLY from OdinPay() constructor:', odinConstructorError);
        // Re-throw to be caught by the outer catch block which handles emitting the event
        this.odinPayInstance = null;
        throw odinConstructorError;
      }

      console.log('[Core Component] OdinPay initialized with instance:', this.odinPayInstance);
      this.initializationError = null;

      // Call the method to create the form
      this.renderOdinForm();
    } catch (error: any) {
      // We're keeping `error: any` for now, can be typed as `Error`
      console.error('[Core Component] RAW Error object during OdinPay initialization:', error);
      const errorMessage = error?.message || 'Failed to initialize OdinPay.';
      console.error('[Core Component] Error initializing OdinPay (processed message):', errorMessage);
      this.initializationError = errorMessage; // This state is used for display within the component itself

      let specificErrorCode = 'INITIALIZATION_ERROR'; // Default/general initialization error code

      // Try to map known OdinPay.js initialization error messages to more specific codes
      if (errorMessage === 'No key provided') {
        specificErrorCode = 'INIT_NO_KEY_PROVIDED';
      } else if (errorMessage === 'Badly formatted key') {
        specificErrorCode = 'INIT_BADLY_FORMATTED_KEY';
      } else if (errorMessage === 'Invalid Key') {
        // When key JSON structure is wrong
        specificErrorCode = 'INIT_INVALID_KEY_STRUCTURE';
      } else if (errorMessage.startsWith('Unsupported country')) {
        specificErrorCode = 'INIT_UNSUPPORTED_COUNTRY';
      } else if (
        errorMessage.includes('BasisTheoryElements') ||
        errorMessage.includes('Elements script') || // Error from BT script loader
        errorMessage.includes('API key is required') // BT API key missing from OdinPay key
      ) {
        specificErrorCode = 'INIT_BT_SDK_FAILURE'; // General code for BasisTheory SDK related issues
      }
      // Add more specific checks if other distinct initialization errors are identified

      const errorPayload: OdinPayErrorPayload = {
        code: specificErrorCode,
        message: errorMessage,
        // fieldErrors and httpStatusCode are typically not applicable for these synchronous init errors
        rawError: error, // Also good to include the raw error in the emitted payload
      };
      this.odinErrorInternal.emit(errorPayload);

      this.odinPayInstance = null; // Ensure instance is null
      this.isLoading = false; // Ensure loading is stopped
    }
  }

  // Method to create the card form using OdinPay.js
  private renderOdinForm() {
    if (!this.odinPayInstance) {
      console.warn('[Core Component] OdinPay instance not available to create form.');
      if (!this.initializationError) {
        // Defensive set if somehow missed
        this.initializationError = 'OdinPay instance is null, cannot render form.';
        this.odinErrorInternal.emit({ message: this.initializationError, code: 'INSTANCE_NULL' });
      }
      this.odinFormRenderedBySDK = false;
      this.isLoading = false;
      return;
    }

    console.log(`[Core Component] Attempting to create card form. isSingleUse: ${this.isSingleUse}`);
    console.log(`[Core Component] Targeting cardInfoId: #${this.cardInfoId}, postalCodeId: #${this.postalCodeId}, submitButtonId: #${this.odinSubmitButtonId}`);

    const odinPayFields: any = {
      // Start with base fields
      cardInformation: {
        selector: this.cardInfoId,
      },
      postalCode: {
        selector: this.postalCodeId,
      },
    };

    // Conditionally add 'name' field if configured
    if (this.billingFieldsConfig?.name) {
      odinPayFields.name = {
        selector: this.nameOnCardId,
        placeholder: 'Name on Card', // Optional: OdinPay might have its own default
        // ariaLabel: "Name on Card", // Optional
      };
    }

    console.log('[Core Component] Final fields object for OdinPay:', odinPayFields);

    try {
      this.odinPayInstance.createCardForm({
        isSingleUse: this.isSingleUse,
        submitButton: {
          selector: this.odinSubmitButtonId,
          callback: (result: any) => {
            console.log('[Core Component] OdinPay submit callback RAW result:', JSON.stringify(result, null, 2));

            if (result && result.success === true && result.paymentMethod && result.paymentMethod.id) {
              console.log('[Core Component] Success! PaymentMethodID:', result.paymentMethod.id);
              // Emit success event
              this.odinSubmitInternal.emit({ paymentMethodId: result.paymentMethod.id });
            } else if (result && result.success === false) {
              // Handle error based on result.message
              console.error('[Core Component] Error from OdinPay callback. Raw result.message:', result.message);
              const parsedErrorPayload = this.parseOdinPayError(result);
              this.odinErrorInternal.emit(parsedErrorPayload);
            } else {
              // Handle unexpected structure
              console.warn('[Core Component] OdinPay callback with unexpected result structure:', result);
              this.odinErrorInternal.emit({
                message: 'Received an unexpected result structure from OdinPay.',
                code: 'UNEXPECTED_CALLBACK_STRUCTURE',
              });
            }
            this.isLoading = false; // Set loading false after callback processing
          },
        },
        fields: odinPayFields,
      });
      console.log('[Core Component] OdinPay createCardForm called successfully.');
      this.initializationError = null;
      this.odinFormRenderedBySDK = true;
      this.isLoading = false; // Set loading false after createCardForm call succeeds
    } catch (error) {
      // FIXME -- Expect the actual Error type here.
      console.error('[Core Component] Error calling createCardForm:', error);
      this.initializationError = (error as any)?.message || 'Failed to create OdinPay card form.';
      this.odinErrorInternal.emit({ message: this.initializationError!, code: 'CREATE_FORM_ERROR' });
      this.odinFormRenderedBySDK = false;
      this.isLoading = false;
    }
  }

  private handleVisibleSubmitClick = () => {
    console.log('[Core Component] Visible submit button clicked.');

    // --- Guard against submission if not properly initialized/rendered ---
    if (this.isLoading || !this.odinPayInstance || !this.odinFormRenderedBySDK || this.initializationError) {
      console.warn(
        '[Core Component] Submission prevented. isLoading:',
        this.isLoading,
        'hasInstance:',
        !!this.odinPayInstance,
        'formRendered:',
        this.odinFormRenderedBySDK,
        'initError:',
        this.initializationError,
      );
      // Optionally, re-emit the initializationError if it exists, or a new error
      if (this.initializationError) {
        this.odinErrorInternal.emit({ message: `Cannot submit: ${this.initializationError}`, code: 'SUBMIT_WHILE_INIT_ERROR' });
      } else if (!this.odinPayInstance || !this.odinFormRenderedBySDK) {
        this.odinErrorInternal.emit({ message: 'Cannot submit: Form not ready.', code: 'FORM_NOT_READY' });
      }
      return;
    }

    // Set loading state
    this.isLoading = true;

    // Find the hidden button and click it programmatically
    const odinButton = document.getElementById(this.odinSubmitButtonId);
    if (odinButton) {
      console.log('[Core Component] Programmatically clicking hidden Odin button.');
      odinButton.click();
      // Note: isLoading will be set to false inside the OdinPay callback
    } else {
      console.error('[Core Component] Hidden Odin submit button not found!');
      this.odinErrorInternal.emit({ message: 'Internal error: Submit button not found.', code: 'INTERNAL_ERROR' });
      this.isLoading = false; // Stop loading if we can't proceed
    }
  };

  private parseOdinPayError(odinResult: any): OdinPayErrorPayload {
    let code = 'ODIN_CALLBACK_ERROR'; // Default code
    let generalMessage = 'An error occurred during payment processing.';
    const fieldErrors: OdinPayFieldError[] = [];
    let httpStatusCode: number | undefined;

    if (typeof odinResult.message === 'string') {
      generalMessage = odinResult.message;
      // Try to extract HTTP status code
      const httpMatch = odinResult.message.match(/Error: HTTP error. Status: (\d+)/);
      if (httpMatch && httpMatch[1]) {
        httpStatusCode = parseInt(httpMatch[1], 10);
        code = httpStatusCode >= 500 ? 'API_SERVER_ERROR' : 'API_CLIENT_ERROR';
        if (httpStatusCode === 401) code = 'API_AUTH_ERROR';
      } else {
        code = 'GENERAL_PAYMENT_ERROR';
      }
    } else if (Array.isArray(odinResult.message)) {
      // For now, join array messages into one general message
      // We can enhance this later if specific array messages need distinct handling
      generalMessage = odinResult.message.join('; ');
      code = 'VALIDATION_ERROR_GENERAL';
      // We could also populate fieldErrors if we can parse these strings further
      odinResult.message.forEach((msg: string, index: number) => {
        fieldErrors.push({ field: `general[${index}]`, message: msg });
      });
    } else if (typeof odinResult.message === 'object' && odinResult.message !== null) {
      generalMessage = 'Validation failed. Please check the fields below.'; // More generic message
      code = 'VALIDATION_ERROR_FIELDS';
      for (const fieldKey in odinResult.message) {
        if (Object.prototype.hasOwnProperty.call(odinResult.message, fieldKey)) {
          fieldErrors.push({
            field: fieldKey,
            message: odinResult.message[fieldKey] as string, // Assuming messages are strings
          });
        }
      }
      if (fieldErrors.length === 1 && fieldErrors[0].field.match(/^\d+$/)) {
        // If it's an object but has only numeric keys (like "0"), it's more like a general validation message
        generalMessage = fieldErrors[0].message;
      }
    } else {
      generalMessage = 'An unknown error occurred.';
      code = 'UNKNOWN_ERROR';
    }

    const payload: OdinPayErrorPayload = {
      code,
      message: generalMessage,
    };
    if (fieldErrors.length > 0) {
      payload.fieldErrors = fieldErrors;
    }
    if (httpStatusCode) {
      payload.httpStatusCode = httpStatusCode;
    }
    payload.rawError = odinResult.message;

    return payload;
  }

  render() {
    const isButtonDisabled = this.isLoading || !this.odinFormRenderedBySDK || !!this.initializationError;
    return (
      <div class="exerp-odin-dropin-container">
        {this.initializationError && (
          <div style={{ color: 'red', marginBottom: '10px', border: '1px solid red', padding: '5px' }}>Initialization Error: {this.initializationError}</div>
        )}

        {this.billingFieldsConfig?.name && (
          <div class="odin-field-container">
            <label htmlFor={this.nameOnCardId}>Name on Card</label>
            <div id={this.nameOnCardId} class="odin-input"></div>
          </div>
        )}

        <div class="odin-field-container">
          <label htmlFor={this.cardInfoId}>Card Information</label>
          <div id={this.cardInfoId} class="odin-input"></div>
        </div>

        <div class="odin-field-container">
          <label htmlFor={this.postalCodeId}>Postal Code</label>
          <div id={this.postalCodeId} class="odin-input"></div>
        </div>

        <div class="odin-submit-container">
          <button id={this.visibleSubmitButtonId} class="odin-submit-button" type="button" disabled={isButtonDisabled} onClick={this.handleVisibleSubmitClick}>
            {this.isLoading ? 'Loading...' : 'Pay'}
          </button>

          {/* HIDDEN Button - OdinPay targets this */}
          <button id={this.odinSubmitButtonId} type="button" style={{ display: 'none' }} aria-hidden="true"></button>

          <div class="odin-form-footer">Secured by ODIN Pay {/* TODO: Maybe make text configurable later? */}</div>
        </div>
      </div>
    );
  }
}
