/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { OdinPayErrorPayload, OdinPaySubmitPayload } from "./components/exerp-odin-cc-form/exerp-odin-cc-form";
export { OdinPayErrorPayload, OdinPaySubmitPayload } from "./components/exerp-odin-cc-form/exerp-odin-cc-form";
export namespace Components {
    interface ExerpOdinCcForm {
        "isSingleUse": boolean;
        "odinPublicToken"?: string;
    }
}
export interface ExerpOdinCcFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLExerpOdinCcFormElement;
}
declare global {
    interface HTMLExerpOdinCcFormElementEventMap {
        "odinSubmitInternal": OdinPaySubmitPayload;
        "odinErrorInternal": OdinPayErrorPayload;
    }
    interface HTMLExerpOdinCcFormElement extends Components.ExerpOdinCcForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLExerpOdinCcFormElementEventMap>(type: K, listener: (this: HTMLExerpOdinCcFormElement, ev: ExerpOdinCcFormCustomEvent<HTMLExerpOdinCcFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLExerpOdinCcFormElementEventMap>(type: K, listener: (this: HTMLExerpOdinCcFormElement, ev: ExerpOdinCcFormCustomEvent<HTMLExerpOdinCcFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLExerpOdinCcFormElement: {
        prototype: HTMLExerpOdinCcFormElement;
        new (): HTMLExerpOdinCcFormElement;
    };
    interface HTMLElementTagNameMap {
        "exerp-odin-cc-form": HTMLExerpOdinCcFormElement;
    }
}
declare namespace LocalJSX {
    interface ExerpOdinCcForm {
        "isSingleUse"?: boolean;
        "odinPublicToken"?: string;
        "onOdinErrorInternal"?: (event: ExerpOdinCcFormCustomEvent<OdinPayErrorPayload>) => void;
        "onOdinSubmitInternal"?: (event: ExerpOdinCcFormCustomEvent<OdinPaySubmitPayload>) => void;
    }
    interface IntrinsicElements {
        "exerp-odin-cc-form": ExerpOdinCcForm;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "exerp-odin-cc-form": LocalJSX.ExerpOdinCcForm & JSXBase.HTMLAttributes<HTMLExerpOdinCcFormElement>;
        }
    }
}
