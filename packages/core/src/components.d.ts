/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BillingFieldsConfig, OdinPayErrorPayload, OdinPaySubmitPayload } from "./components/exerp-odin-cc-form/exerp-odin-cc-form";
export { BillingFieldsConfig, OdinPayErrorPayload, OdinPaySubmitPayload } from "./components/exerp-odin-cc-form/exerp-odin-cc-form";
export namespace Components {
    interface ExerpOdinCcForm {
        /**
          * Optional configuration to enable and manage additional billing fields. Example: { name: true } to enable the "Name on Card" field.
         */
        "billingFieldsConfig"?: BillingFieldsConfig;
        /**
          * The country code ('US' or 'CA') for which the payment form should be configured. This is mandatory and passed to OdinPay.js.
         */
        "countryCode": 'US' | 'CA';
        /**
          * Indicates if the payment method token generated by OdinPay.js should be treated as single-use (`true`) or intended for saving (`false`). Passed down from the facade. Defaults to `true`.
         */
        "isSingleUse": boolean;
        /**
          * The short-lived public token obtained from the ODIN backend, required to initialize the OdinPay.js library. Passed down from the facade.
         */
        "odinPublicToken"?: string;
    }
}
export interface ExerpOdinCcFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLExerpOdinCcFormElement;
}
declare global {
    interface HTMLExerpOdinCcFormElementEventMap {
        "odinSubmitInternal": OdinPaySubmitPayload;
        "odinErrorInternal": OdinPayErrorPayload;
    }
    interface HTMLExerpOdinCcFormElement extends Components.ExerpOdinCcForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLExerpOdinCcFormElementEventMap>(type: K, listener: (this: HTMLExerpOdinCcFormElement, ev: ExerpOdinCcFormCustomEvent<HTMLExerpOdinCcFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLExerpOdinCcFormElementEventMap>(type: K, listener: (this: HTMLExerpOdinCcFormElement, ev: ExerpOdinCcFormCustomEvent<HTMLExerpOdinCcFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLExerpOdinCcFormElement: {
        prototype: HTMLExerpOdinCcFormElement;
        new (): HTMLExerpOdinCcFormElement;
    };
    interface HTMLElementTagNameMap {
        "exerp-odin-cc-form": HTMLExerpOdinCcFormElement;
    }
}
declare namespace LocalJSX {
    interface ExerpOdinCcForm {
        /**
          * Optional configuration to enable and manage additional billing fields. Example: { name: true } to enable the "Name on Card" field.
         */
        "billingFieldsConfig"?: BillingFieldsConfig;
        /**
          * The country code ('US' or 'CA') for which the payment form should be configured. This is mandatory and passed to OdinPay.js.
         */
        "countryCode": 'US' | 'CA';
        /**
          * Indicates if the payment method token generated by OdinPay.js should be treated as single-use (`true`) or intended for saving (`false`). Passed down from the facade. Defaults to `true`.
         */
        "isSingleUse"?: boolean;
        /**
          * The short-lived public token obtained from the ODIN backend, required to initialize the OdinPay.js library. Passed down from the facade.
         */
        "odinPublicToken"?: string;
        /**
          * Fired when OdinPay.js returns an error during submission or if an internal setup error occurs. Contains the error message.
         */
        "onOdinErrorInternal"?: (event: ExerpOdinCcFormCustomEvent<OdinPayErrorPayload>) => void;
        /**
          * Fired when OdinPay.js successfully returns a payment method token after the user submits the form. Contains the paymentMethodId.
         */
        "onOdinSubmitInternal"?: (event: ExerpOdinCcFormCustomEvent<OdinPaySubmitPayload>) => void;
    }
    interface IntrinsicElements {
        "exerp-odin-cc-form": ExerpOdinCcForm;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "exerp-odin-cc-form": LocalJSX.ExerpOdinCcForm & JSXBase.HTMLAttributes<HTMLExerpOdinCcFormElement>;
        }
    }
}
